geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(
range = c(0.2, 1),
name = "Number of Games",  # Title for the legend
breaks = unique(white_win_data$total_games),  # Set breaks for the number of games
labels = unique(white_win_data$total_games)  # Display the number of games in the legend
)
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = total_games^0.001)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 1) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 1.0) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 50) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 50)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 100)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 255)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 1)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 100000)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 1)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 0)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 0)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 0)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 255)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
?aes
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 1.0)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 2.0)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 10000000)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 10000000000000)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 255.0)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
source("~/Documents/RStudio/data-literacy-in-r/hypo2.R")
source("~/Documents/RStudio/data-literacy-in-r/hypo2.R")
source("~/Documents/RStudio/data-literacy-in-r/hypo2.R")
source("~/Documents/RStudio/data-literacy-in-r/hypo2.R")
