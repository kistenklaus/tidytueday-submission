rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 100000)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 1)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 0)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_alpha_continuous(range = c(0.1, 1))  # Apply transparency scaling
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 0)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 0)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 255)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
?aes
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 1.0)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 2.0)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 10000000)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 10000000000000)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
white_win_data <- chess %>%
mutate(
avg_rating = (white_rating + black_rating) / 2,  # Average rating for grouping
rating_bin = cut(avg_rating, breaks = seq(floor(min(avg_rating)), ceiling(max(avg_rating)), by = 50), include.lowest = FALSE)
) %>%
group_by(rating_bin) %>%
summarise(
white_win_rate = sum(winner == "white") / n() * 100,  # White win percentage
total_games = n()
) %>%
ungroup()
# Apply exponential scaling for transparency
ggplot(white_win_data, aes(x = rating_bin, y = white_win_rate, alpha = 255.0)) +
geom_col(fill = "steelblue") +
geom_hline(yintercept = 50, linetype = "dashed", color = "red") +  # Reference line at 50%
labs(
title = "White Win Percentage by Rating",
x = "Average Rating (binned)",
y = "White Win Percentage (%)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
source("~/Documents/RStudio/data-literacy-in-r/hypo2.R")
source("~/Documents/RStudio/data-literacy-in-r/hypo2.R")
source("~/Documents/RStudio/data-literacy-in-r/hypo2.R")
source("~/Documents/RStudio/data-literacy-in-r/hypo2.R")
source("~/Documents/RStudio/data-literacy-in-r/rated-games-first-move-advantage.R")
chess
a
tuesday_chess
source("~/Documents/RStudio/data-literacy-in-r/rated-games-first-move-advantage.R")
chess
table(chess)
source("~/Documents/RStudio/data-literacy-in-r/rated-games-first-move-advantage.R")
prop.table(outcomes)
source("~/Documents/RStudio/data-literacy-in-r/rated-games-first-move-advantage.R")
source("~/Documents/RStudio/data-literacy-in-r/rated-games-first-move-advantage.R")
# Converts the chess table of column winner into a 3 columns, which count the
# amount of times a game ended with white winning, black winning or
# the game beeing drawn
outcomes <- table(count)
source("~/Documents/RStudio/data-literacy-in-r/rated-games-first-move-advantage.R")
chess
chess$ winner
source("~/Documents/RStudio/data-literacy-in-r/rated-games-first-move-advantage.R")
table(chess)
table(chess$ winner)
source("~/Documents/RStudio/data-literacy-in-r/rated-games-first-move-advantage.R")
outcomes
prop.table(outcomes)
source("~/Documents/RStudio/data-literacy-in-r/rated-games-first-move-advantage.R")
outcome_percentages
source("~/Documents/RStudio/data-literacy-in-r/rated-games-first-move-advantage.R")
pie(outcome_percentages, labels = paste(names(percentages), "(", round(percentages, 1), "%)", sep = ""),
col = c("lightblue", "lightgreen", "lightcoral"),
main = "Chess Game Outcome Percentages")
source("~/Documents/RStudio/data-literacy-in-r/rated-games-first-move-advantage.R")
names(tuesday_chess)
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
gather
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
ratings
tuesday_chess
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
ratings
ratings
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
ratings
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
latest_ratings
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
ggplot(latest_ratings, aes(x = rating)) +
geom_histogram(binwidth = 50, fill = 'blue', alpha = 0.7, color = 'black') +
labs(title = "Most Recent Player Rating Distribution", x = "Rating", y = "Frequency") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
n_distinct
n_distinct?
count(latest_ratings)
total_players
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
latest_ratings
count(total_players)
count(total_players)
count(total_players)
total_players
ggplot(latest_ratings, aes(x = rating)) +
geom_histogram(aes(y = ..count../total_players * 100), binwidth = 50, fill = 'blue', alpha = 0.7, color = 'black') +
labs(title = "Most Recent Player Rating Distribution", x = "Rating", y = "Percentage of Players") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
ggplot(latest_ratings, aes(x = rating)) +
geom_histogram(aes(y = ..count../total_players * 100), binwidth = 50, fill = 'blue', alpha = 0.7, color = 'black') +
labs(title = "Most Recent Player Rating Distribution", x = "Rating", y = "Percentage of Players") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
ggplot(latest_ratings, aes(x = rating)) +
geom_histogram(aes(y = ..count../total_players * 100), binwidth = 50, fill = 'blue', alpha = 0.7, color = 'black') +
labs(title = "Most Recent Player Rating Distribution", x = "Rating", y = "Percentage of Players") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
nrows(latest_rating)
nrow(latest_ratings)
total_players
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
nrow(latest_ratings)
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
nrow(latest_ratings)
total_players
unique
unique(latest_ratings$ player_id)
unique(ratings)
unique?
unique??
?unique
ratings %>% group_by(player_id)
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
latest_ratings
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
latest_ratings
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
latest_ratings
n_distrinct
n_distinct
?n_distinct
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
ggplot(latest_ratings, aes(x = rating)) +
geom_histogram(aes(y = ..count../total_players * 100), binwidth = 50, fill = 'blue', alpha = 0.7, color = 'black') +
labs(title = "Most Recent Player Rating Distribution", x = "Rating", y = "Percentage of Players") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
ggplot(latest_ratings, aes(x = rating)) +
geom_histogram(aes(y = ..count../total_players * 100), binwidth = 50, fill = 'blue', alpha = 0.7, color = 'black') +
labs(title = "Most Recent Player Rating Distribution", x = "Rating", y = "Percentage of Players") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
?gather
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
ggplot(player_ratings, aes(x = rating)) +
geom_histogram(
aes(y = after_stat(count) / sum(after_stat(count)) * 100),
binwidth = 50,
fill = "steelblue",
color = "black",
alpha = 0.7
) +
labs(
title = "Histogram of Average Player Ratings",
x = "Rating",
y = "Percentage of Players"
) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal()
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
ggplot(player_ratings, aes(x = rating)) +
geom_histogram(
aes(y = after_stat(count) / sum(after_stat(count)) * 100),
binwidth = 50,
fill = "steelblue",
color = "black",
alpha = 0.7
) +
labs(
title = "Histogram of Average Player Ratings",
x = "Rating",
y = "Percentage of Players"
) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal()
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
ggplot(player_ratings, aes(x = rating)) +
geom_histogram(
aes(y = after_stat(count) / sum(after_stat(count)) * 100),
binwidth = 50,
fill = "steelblue",
color = "black",
alpha = 0.7
) +
labs(
title = "Histogram of Average Player Ratings",
x = "Rating",
y = "Percentage of Players"
) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal()
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
ggplot(player_ratings, aes(x = rating)) +
geom_histogram(
aes(y = after_stat(count) / sum(after_stat(count)) * 100),
binwidth = 100,
fill = "lightblue",
color = "black",
alpha = 0.7
) +
labs(
title = "Histogram of Average Player Ratings",
x = "Rating",
y = "Percentage of Players"
) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal()
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
ggplot(player_ratings, aes(x = rating)) +
geom_histogram(
aes(y = after_stat(count) / sum(after_stat(count)) * 100),
binwidth = 100,
fill = "steelblue",
color = "black",
alpha = 0.7
) +
labs(
title = "Histogram of Average Player Ratings",
x = "Rating",
y = "Percentage of Players"
) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal()
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
source("~/Documents/RStudio/data-literacy-in-r/player-ratings.R")
